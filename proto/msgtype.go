// Code generated by protoc-gen-msgtype. DO NOT EDIT.
package msgtype

import (
	"reflect"
	"sort"
	"strings"
	"sync"

	"mineNet/proto/login"
)

type MessageTypeInfo struct {
	MsgType     uint32 // 改为 uint32
	RequestType reflect.Type
	ReplyType   reflect.Type
	Name        string
}

type MessageRegistry struct {
	mu           sync.RWMutex
	messageTypes map[reflect.Type]uint32     // 改为 uint32
	messageInfos map[uint32]*MessageTypeInfo // 改为 uint32
}

var defaultRegistry = NewMessageRegistry()

func NewMessageRegistry() *MessageRegistry {
	r := &MessageRegistry{
		messageTypes: make(map[reflect.Type]uint32),     // 改为 uint32
		messageInfos: make(map[uint32]*MessageTypeInfo), // 改为 uint32
	}
	r.init()
	return r
}

func (r *MessageRegistry) init() {

	r.registerMessage(
		login.LoginRequest{},
		uint32(login.MsgType_LOGIN_REQ), // 改为 uint32
		"LOGIN_REQ",
	)

	r.registerMessage(
		login.LoginResponse{},
		uint32(login.MsgType_LOGIN_RSP), // 改为 uint32
		"LOGIN_RSP",
	)

	r.registerMessage(
		login.LogoutRequest{},
		uint32(login.MsgType_LOGOUT_REQ), // 改为 uint32
		"LOGOUT_REQ",
	)

	r.registerMessage(
		login.LogoutResponse{},
		uint32(login.MsgType_LOGOUT_RSP), // 改为 uint32
		"LOGOUT_RSP",
	)

}

func (r *MessageRegistry) registerMessage(msg interface{}, msgType uint32, name string) { // 改为 uint32
	msgTyp := reflect.TypeOf(msg)

	info := &MessageTypeInfo{
		MsgType: msgType,
		Name:    name,
	}

	if strings.HasSuffix(name, "REQ") {
		info.RequestType = msgTyp
	} else if strings.HasSuffix(name, "RSP") {
		info.ReplyType = msgTyp
	}

	r.mu.Lock()
	defer r.mu.Unlock()

	r.messageTypes[msgTyp] = msgType
	r.messageInfos[msgType] = info
}

func GetMessageType(msg interface{}) uint32 { // 改为 uint32
	if msg == nil {
		return 0
	}

	defaultRegistry.mu.RLock()
	defer defaultRegistry.mu.RUnlock()

	msgType := reflect.TypeOf(msg)
	if msgType.Kind() == reflect.Ptr {
		msgType = msgType.Elem()
	}

	if msgType, ok := defaultRegistry.messageTypes[msgType]; ok {
		return msgType
	}
	return 0
}

func GetMessageInfo(msgType uint32) *MessageTypeInfo { // 改为 uint32
	defaultRegistry.mu.RLock()
	defer defaultRegistry.mu.RUnlock()

	return defaultRegistry.messageInfos[msgType]
}

func GetAllMessageTypes() []uint32 { // 改为 uint32
	defaultRegistry.mu.RLock()
	defer defaultRegistry.mu.RUnlock()

	var types []uint32 // 改为 uint32
	for msgType := range defaultRegistry.messageInfos {
		types = append(types, msgType)
	}

	sort.Slice(types, func(i, j int) bool {
		return types[i] < types[j]
	})

	return types
}
