// Code generated by protoc-gen-msgtype. DO NOT EDIT.
package login

import (
	"reflect"
	"sort"
	"strings"
	"sync"

	"google.golang.org/protobuf/proto"
	login "proto/login"
)

// MessageTypeInfo contains information about a message type
type MessageTypeInfo struct {
	MsgType     login.MsgType
	RequestType reflect.Type
	ReplyType   reflect.Type
	Name        string
}

// MessageRegistry handles message type registration and lookup
type MessageRegistry struct {
	mu           sync.RWMutex
	messageTypes map[reflect.Type]login.MsgType
	messageInfos map[login.MsgType]*MessageTypeInfo
}

var defaultRegistry = NewMessageRegistry()

// NewMessageRegistry creates a new message registry
func NewMessageRegistry() *MessageRegistry {
	r := &MessageRegistry{
		messageTypes: make(map[reflect.Type]login.MsgType),
		messageInfos: make(map[login.MsgType]*MessageTypeInfo),
	}
	r.init()
	return r
}

// init initializes the registry with all known message types
func (r *MessageRegistry) init() {

	r.registerMessage(
		&login.LOGINRequest{},
		login.MsgType_LOGIN_REQ,
		"LOGIN_REQ",
	)

	r.registerMessage(
		&login.LOGINResponse{},
		login.MsgType_LOGIN_RSP,
		"LOGIN_RSP",
	)

	r.registerMessage(
		&login.LOGOUTRequest{},
		login.MsgType_LOGOUT_REQ,
		"LOGOUT_REQ",
	)

	r.registerMessage(
		&login.LOGOUTResponse{},
		login.MsgType_LOGOUT_RSP,
		"LOGOUT_RSP",
	)

}

// registerMessage registers a message type with the registry
func (r *MessageRegistry) registerMessage(msg proto.Message, msgType login.MsgType, name string) {
	msgTyp := reflect.TypeOf(msg)

	info := &MessageTypeInfo{
		MsgType: msgType,
		Name:    name,
	}

	if strings.HasSuffix(name, "REQ") {
		info.RequestType = msgTyp
	} else if strings.HasSuffix(name, "RSP") {
		info.ReplyType = msgTyp
	}

	r.mu.Lock()
	defer r.mu.Unlock()

	r.messageTypes[msgTyp] = msgType
	r.messageInfos[msgType] = info
}

// GetMessageType returns the message type for a given message
func GetMessageType(msg proto.Message) login.MsgType {
	if msg == nil {
		return login.MsgType_MSG_TYPE_UNKNOWN
	}

	defaultRegistry.mu.RLock()
	defer defaultRegistry.mu.RUnlock()

	if msgType, ok := defaultRegistry.messageTypes[reflect.TypeOf(msg)]; ok {
		return msgType
	}
	return login.MsgType_MSG_TYPE_UNKNOWN
}

// GetMessageInfo returns information about a message type
func GetMessageInfo(msgType login.MsgType) *MessageTypeInfo {
	defaultRegistry.mu.RLock()
	defer defaultRegistry.mu.RUnlock()

	return defaultRegistry.messageInfos[msgType]
}

// GetAllMessageTypes returns all registered message types
func GetAllMessageTypes() []login.MsgType {
	defaultRegistry.mu.RLock()
	defer defaultRegistry.mu.RUnlock()

	var types []login.MsgType
	for msgType := range defaultRegistry.messageInfos {
		types = append(types, msgType)
	}

	sort.Slice(types, func(i, j int) bool {
		return types[i] < types[j]
	})

	return types
}
